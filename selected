context/spt_js/dg_table_action.js:                arg_dict['selected_search_keys'] = spt.dg_table.get_selected_search_keys(table_id).join(',');
context/spt_js/dg_table_action.js:    var src_search_keys = spt.dg_table.get_selected_search_keys(src_table);
context/spt_js/dg_table_action.js:    var dst_rows = spt.dg_table.get_selected(dst_table);
context/spt_js/dg_table_action.js:    var src_tbodies = spt.dg_table.get_selected_tbodies(src_table);
context/spt_js/gantt.js:        var containers = spt.table.get_selected_rows(table);
context/spt_js/gantt.js:        var containers = spt.dg_table.get_selected_tbodies(table);
context/spt_js/gantt.js:    var selected_rows = version == 2 ? spt.table.get_selected_rows(): spt.dg_table.get_selected( table );
context/spt_js/utility.js:                spt.tab.reload_selected();
context/spt_js/utility.js:                spt.tab.reload_selected();
context/spt_js/utility.js:spt.input.save_selected = function(bvr, name, key)
context/spt_js/cgapp.js:spt.cgapp.load_selected_snapshots_cbk = function(evt, bvr) {
context/spt_js/dg_table.js:spt.dg_table.get_selected = function( table_id, kwargs )
context/spt_js/dg_table.js:spt.dg_table.get_selected_tbodies = function( table_id, kwargs )
context/spt_js/dg_table.js:spt.dg_table.get_selected_search_keys = function( table_id, kwargs )
context/spt_js/dg_table.js:    var selected_rows = spt.dg_table.get_selected(table_id,kwargs);
context/spt_js/dg_table.js:spt.dg_table.gear_smenu_retire_selected_cbk = function( evt, bvr )
context/spt_js/dg_table.js:        spt.table.retire_selected();
context/spt_js/dg_table.js:        spt.dg_table.retire_selected( table );
context/spt_js/dg_table.js:spt.dg_table.retire_selected = function(table)
context/spt_js/dg_table.js:    var selected_rows = spt.dg_table.get_selected(table);
context/spt_js/dg_table.js:        spt.alert("Nothing selected to retire");
context/spt_js/dg_table.js:    var show_retired = spt.dg_table.get_show_retired_flag( selected_rows[0] );
context/spt_js/dg_table.js:    var search_key_info = spt.dg_table.parse_search_key( selected_rows[0].getAttribute("spt_search_key") );
context/spt_js/dg_table.js:spt.dg_table.gear_smenu_delete_selected_cbk = function( evt, bvr )
context/spt_js/dg_table.js:        spt.table.delete_selected();
context/spt_js/dg_table.js:        spt.dg_table.delete_selected( table, { 'table_el': table, 
context/spt_js/dg_table.js:spt.dg_table.delete_selected = function(table, kwargs)
context/spt_js/dg_table.js:    var selected_rows = spt.dg_table.get_selected(table);
context/spt_js/dg_table.js:        spt.alert("Nothing selected to delete");
context/spt_js/dg_table.js:    var search_key_info = spt.dg_table.parse_search_key( selected_rows[0].getAttribute("spt_search_key") );
context/spt_js/dg_table.js:        selected_rows = spt.dg_table.get_selected(table);
context/spt_js/dg_table.js:            spt.dg_table._delete_selected( table, kwargs, num, selected_rows, search_key_info );
context/spt_js/dg_table.js:spt.dg_table._delete_selected = function( table, kwargs, num, selected_rows, search_key_info )
context/spt_js/dg_table.js:            spt.log_eval_error( e, stmt, "spt.dg_table.gear_smenu_delete_selected_cbk",
context/spt_js/dg_table.js:spt.dg_table.gear_smenu_add_task_selected_cbk = function( evt, bvr )
context/spt_js/dg_table.js:            selected_rows = spt.table.get_selected_rows();
context/spt_js/dg_table.js:            selected_rows = spt.dg_table.get_selected(table_id);
context/spt_js/dg_table.js:spt.dg_table.add_task_selected = function(bvr)
context/spt_js/dg_table.js:        spt.alert("Nothing selected to create task for");
context/spt_js/dg_table.js:    //var search_key_info = spt.dg_table.parse_search_key( selected_rows[0].getAttribute("spt_search_key") );
context/spt_js/dg_table.js:            spt.dg_table.retire_selected(table_id);
context/spt_js/dg_table.js:                spt.dg_table.delete_selected(table_id);
context/spt_js/dg_table.js:        //search_keys = spt.table.get_selected_search_keys();
context/spt_js/dg_table.js:        spt.alert("No saved search selected");
context/spt_js/dg_table.js:        spt.alert('A label was selected. Please choose a valid value.');
context/spt_js/dg_table.js:        var search_keys = spt.dg_table.get_selected_search_keys(table);
context/spt_js/dg_table.js:                selected_row_list = spt.dg_table.get_selected( table );
context/spt_js/dg_table.js:        selected_row_list = spt.dg_table.get_selected( table );
context/spt_js/dg_table.js:            var selected_rows = spt.table.get_selected_rows();
context/spt_js/dg_table.js:            var selected_rows = spt.dg_table.get_selected(table,  {'include_embedded_tables': true} );
context/spt_js/dg_table.js:        //var sel_tr_list = spt.dg_table.get_selected( table.get('id') );
context/spt_js/dg_table.js:            spt.alert('No rows selected for exporting to CSV ... skipping "Export Selected" action.');
context/spt_js/dg_table.js:            spt.alert('More than 1 type of item is selected ... skipping "Export Selected" action.');
context/spt_js/mouse.js:            if( spt.has_class( hover_el, class_selected ) ) {
context/spt_js/mouse.js:            spt.remove_class( hover_el, class_selected_hover );
context/spt_js/api/api.js:    spt.tab.load_selected(title, title, class_name, kwargs);
context/javascript/PyMaya.js:    //var search_types = spt.dg_table.get_selected_search_keys(table);
context/javascript/PyMaya.js:    var selected = spt.dg_table.get_selected(table);
context/javascript/PyMaya.js:        spt.tab.reload_selected();
context/javascript/PyMaya.js:    spt.tab.reload_selected();
context/javascript/PyMaya.js:    spt.tab.reload_selected();
context/ui_proto/ui_proto_test.js:                spt.add_class( option_list[i], "rc_content_selected" );
context/ui_proto/ui_proto_test.js:                spt.remove_class( option_list[i], "rc_content_selected" );
context/ui_proto/ui_proto_test.css:.spt_dg_row_selected
context/ui_proto/ui_proto_test.css:.spt_dg_row_selected_hover
contrib/script/quicktime_sequence_script/quicktime_sequence_script.txt:    var search_keys = spt.dg_table.get_selected_search_keys(table);
contrib/widget/adobe_photoshop_popup_wdg/adobe_photoshop_wdg.txt:          search_keys = spt.dg_table.get_selected_search_keys(table);
contrib/widget/nuke_popup_wdg/nuke_wdg_panel.txt:          search_keys = spt.dg_table.get_selected_search_keys(table);
Binary file pyasm/biz/clipboard.pyc matches
Binary file pyasm/web/web_environment.pyc matches
pyasm/widget/input_wdg.py:                    "spt.input.save_selected(bvr, '%s','%s')"%(my.name, key)}
pyasm/widget/table_element_wdg.py:            var rows = spt.dg_table.get_selected(table_id);
pyasm/widget/table_element_wdg.py:            var rows = spt.dg_table.get_selected(table_id);
tactic/ui/cgapp/loader_wdg.py:                spt.app_busy.show("Loading ...", "Loading selected [%s] in to session");
tactic/ui/manager/element_definition_wdg.py:            var header = spt.tab.get_selected_header();
tactic/ui/input/icon_select_wdg.py:                var icon_name = chooser.getProperty("spt_icon_selected");
tactic/ui/container/tab_wdg.py:        var selected_header = spt.tab.get_selected_header();
tactic/ui/container/tab_wdg.py:spt.tab.load_selected = function(element_name, title, class_name, kwargs, values) {
tactic/ui/container/tab_wdg.py:    var header = spt.tab.get_selected_header();
tactic/ui/container/tab_wdg.py:        headers[i].removeClass("spt_is_selected");
tactic/ui/container/tab_wdg.py:    header.addClass("spt_is_selected");
tactic/ui/container/tab_wdg.py:    selected_tab = document.getElementsByClassName("spt_is_selected");//MTM
tactic/ui/container/tab_wdg.py:            if(tab_content[r].getAttribute("spt_title") == selected_title){//MTM
tactic/ui/container/tab_wdg.py:        var last_element_name = spt.tab.get_selected_element_name();
tactic/ui/container/tab_wdg.py:            headers[i].removeClass("spt_is_selected");
tactic/ui/container/tab_wdg.py:        header.addClass("spt_is_selected");
tactic/ui/container/tab_wdg.py:spt.tab.reload_selected = function() {
tactic/ui/container/tab_wdg.py:    var header = spt.tab.get_selected_header();
tactic/ui/container/tab_wdg.py:spt.tab.get_selected_header = function() {
tactic/ui/container/tab_wdg.py:        if ( header.hasClass("spt_is_selected") ) {
tactic/ui/container/tab_wdg.py:spt.tab.get_selected_element_name = function() {
tactic/ui/container/tab_wdg.py:    var header = spt.tab.get_selected_header();
tactic/ui/container/tab_wdg.py:spt.tab.get_last_selected_element_name = function() {
tactic/ui/container/tab_wdg.py:        header = spt.tab.get_selected_header(element_name);
tactic/ui/container/tab_wdg.py:    var last_element_name = spt.tab.get_last_selected_element_name();
tactic/ui/container/tab_wdg.py:        selected_tab = document.getElementsByClassName("spt_is_selected");//MTM
tactic/ui/container/tab_wdg.py:                if(tab_content[r].getAttribute("spt_title") == selected_title){//MTM
tactic/ui/container/tab_wdg.py:            header.add_class("spt_is_selected")
tactic/ui/container/tab_wdg.py:                if(tab_content[r].getAttribute("spt_title") == selected_title){//MTM
tactic/ui/container/wizard_wdg.py:                page_div.add_class("spt_wizard_selected")
tactic/ui/container/wizard_wdg.py:            dot_div.add_attr("spt_selected_index", i)
tactic/ui/container/wizard_wdg.py:            var selected_index = parseInt( bvr.src_el.getAttribute("spt_selected_index"));
tactic/ui/container/wizard_wdg.py:                if (page.hasClass("spt_wizard_selected")) {
tactic/ui/container/wizard_wdg.py:                    page.removeClass("spt_wizard_selected");
tactic/ui/container/wizard_wdg.py:            page.addClass("spt_wizard_selected");
tactic/ui/container/wizard_wdg.py:            name_div.add_attr("spt_selected_index", i)
tactic/ui/container/wizard_wdg.py:        if (pages[0].hasClass("spt_wizard_selected")) {
tactic/ui/container/wizard_wdg.py:            if (page.hasClass("spt_wizard_selected")) {
tactic/ui/container/wizard_wdg.py:                page.removeClass("spt_wizard_selected");
tactic/ui/container/wizard_wdg.py:        page.addClass("spt_wizard_selected");
tactic/ui/container/wizard_wdg.py:        if (pages[pages.length-1].hasClass("spt_wizard_selected")) {
tactic/ui/container/wizard_wdg.py:            if (page.hasClass("spt_wizard_selected")) {
tactic/ui/container/wizard_wdg.py:                page.removeClass("spt_wizard_selected");
tactic/ui/container/wizard_wdg.py:        page.addClass("spt_wizard_selected");
tactic/ui/tools/delete_wdg.py:                    spt.tab.reload_selected();
tactic/ui/tools/repo_browser_wdg.py:            file_item.addClass("spt_selected")
tactic/ui/tools/repo_browser_wdg.py:            file_item.removeClass("spt_selected")
tactic/ui/tools/repo_browser_wdg.py:            if (file_item.hasClass("spt_selected")) {
tactic/ui/tools/repo_browser_wdg.py:        spt.repo_browser.clear_selected = function() {
tactic/ui/tools/repo_browser_wdg.py:            var selected = spt.repo_browser.get_selected();
tactic/ui/tools/repo_browser_wdg.py:                spt.repo_browser.unselect(selected[i]);
tactic/ui/tools/repo_browser_wdg.py:        spt.repo_browser.get_selected = function() {
tactic/ui/tools/repo_browser_wdg.py:            var selected = $(document.body).getElements(".spt_selected");
tactic/ui/tools/repo_browser_wdg.py:                spt.repo_browser.clear_selected();
tactic/ui/tools/repo_browser_wdg.py:            var selected = spt.repo_browser.get_selected();
tactic/ui/tools/doc_tool_wdg.py:spt.document.selected_text = null;
tactic/ui/tools/doc_tool_wdg.py:spt.document.get_selected_text = function(frame)
tactic/ui/tools/doc_tool_wdg.py:            var text = spt.document.get_selected_text();
tactic/ui/tools/doc_tool_wdg.py:            spt.document.selected_text = text + "";
tactic/ui/tools/doc_tool_wdg.py:            var selection = spt.document.selected_text;
tactic/ui/tools/doc_tool_wdg.py:            var selection = spt.document.selected_text;
tactic/ui/tools/doc_tool_wdg.py:            var selection = spt.document.selected_text;
tactic/ui/tools/custom_layout_edit_wdg.py:                var element_name = spt.tab.get_selected_element_name();
tactic/ui/tools/custom_layout_edit_wdg.py:                top.setAttribute("spt_selected", element_name);
tactic/ui/tools/custom_layout_edit_wdg.py:                var tab = spt.tab.get_selected_element_name();
tactic/ui/tools/custom_layout_edit_wdg.py:                spt.alert('No view on the left has been selected.');
tactic/ui/tools/custom_layout_edit_wdg.py:                spt.alert("No view selected");
tactic/ui/tools/custom_layout_edit_wdg.py:                spt.alert("No view selected");
tactic/ui/tools/freeform_layout_wdg.py:spt.freeform.selected = [];
tactic/ui/tools/freeform_layout_wdg.py:    spt.freeform_selected = [];
tactic/ui/tools/freeform_layout_wdg.py:    spt.freeform.selected.push(el);
tactic/ui/tools/freeform_layout_wdg.py:    for (var i = 0; i < spt.freeform.selected.length; i++) {
tactic/ui/tools/freeform_layout_wdg.py:    for (var i = 0; i < spt.freeform.selected.length; i++) {
tactic/ui/tools/freeform_layout_wdg.py:        var el = spt.freeform.selected[i];
tactic/ui/tools/freeform_layout_wdg.py:    spt.freeform.selected = [];
tactic/ui/tools/pipeline_wdg.py:        var selected = spt.pipeline.get_selected();
tactic/ui/tools/pipeline_wdg.py:            spt.pipeline.clear_selected();
tactic/ui/tools/pipeline_wdg.py:        spt.pipeline.delete_selected();
tactic/ui/tools/pipeline_wdg.py:        var nodes = spt.pipeline.get_selected_nodes();
tactic/ui/tools/pipeline_wdg.py:    var selected_nodes = spt.pipeline.get_selected_nodes();
tactic/ui/tools/pipeline_wdg.py:    var selected = spt.pipeline.get_selected();
tactic/ui/tools/pipeline_canvas_wdg.py:        if (node.spt_is_selected) {
tactic/ui/tools/pipeline_canvas_wdg.py:        if (node.spt_is_selected) {
tactic/ui/tools/pipeline_canvas_wdg.py:    spt.pipeline.clear_selected();
tactic/ui/tools/pipeline_canvas_wdg.py:                spt.pipeline.add_to_selected(connector);
tactic/ui/tools/pipeline_canvas_wdg.py:spt.pipeline.get_selected_nodes = function() {
tactic/ui/tools/pipeline_canvas_wdg.py:        if (node.spt_is_selected == true) {
tactic/ui/tools/pipeline_canvas_wdg.py:spt.pipeline.get_selected_node = function() {
tactic/ui/tools/pipeline_canvas_wdg.py:    var nodes = spt.pipeline.get_selected_nodes();
tactic/ui/tools/pipeline_canvas_wdg.py:spt.pipeline.get_selected = function() {
tactic/ui/tools/pipeline_canvas_wdg.py:    //var nodes = spt.pipeline.get_selected_nodes();
tactic/ui/tools/pipeline_canvas_wdg.py:spt.pipeline.get_selected_connector = function() {
tactic/ui/tools/pipeline_canvas_wdg.py:   var selected = spt.pipeline.get_selected();
tactic/ui/tools/pipeline_canvas_wdg.py:spt.pipeline.add_to_selected = function(item) {
tactic/ui/tools/pipeline_canvas_wdg.py:spt.pipeline.delete_selected = function() {
tactic/ui/tools/pipeline_canvas_wdg.py:spt.pipeline.clear_selected = function(item) {
tactic/ui/tools/pipeline_canvas_wdg.py:    node.spt_is_selected = true;
tactic/ui/tools/pipeline_canvas_wdg.py:    node.spt_is_selected = false;
tactic/ui/tools/pipeline_canvas_wdg.py:    if (node.spt_is_selected == true) {
tactic/ui/tools/pipeline_canvas_wdg.py:        var nodes = spt.pipeline.get_selected_nodes();
tactic/ui/tools/pipeline_canvas_wdg.py:    if (node.spt_is_selected == true) {
tactic/ui/tools/pipeline_canvas_wdg.py:        var nodes = spt.pipeline.get_selected_nodes();
tactic/ui/tools/pipeline_canvas_wdg.py:    spt.pipeline.clear_selected(); 
tactic/ui/tools/pipeline_canvas_wdg.py:        spt.pipeline.add_to_selected(this);
tactic/ui/tools/ingestion_wdg.py:        spt.tab.load_selected("files", "Files", class_name, kwargs);
tactic/ui/tools/ingestion_wdg.py:        spt.tab.load_selected("rules", "Rules", class_name, kwargs);
tactic/ui/tools/ingestion_wdg.py:            spt.tab.load_selected("rules", "Rules", class_name, kwargs);
tactic/ui/tools/schema_wdg.py:        var selected = spt.pipeline.get_selected();
tactic/ui/tools/schema_wdg.py:        spt.pipeline.clear_selected();
tactic/ui/tools/schema_wdg.py:        spt.pipeline.add_to_selected(item);
tactic/ui/tools/schema_wdg.py:        var connector = spt.pipeline.get_selected_connector();
tactic/ui/tools/schema_wdg.py:        var node = spt.pipeline.get_selected_node();
tactic/ui/tools/schema_wdg.py:        spt.pipeline.delete_selected();
tactic/ui/tools/schema_wdg.py:        var nodes = spt.pipeline.get_selected_nodes();
tactic/ui/tools/schema_wdg.py:        var nodes = spt.pipeline.get_selected_nodes();
tactic/ui/tools/schema_wdg.py:        var nodes = spt.pipeline.get_selected_nodes();
tactic/ui/tools/schema_wdg.py:        var connector = spt.pipeline.get_selected_connector();
tactic/ui/tools/schema_wdg.py:        var selected = spt.pipeline.get_selected();
tactic/ui/tools/schema_wdg.py:            var connector = spt.pipeline.get_selected_connector();
tactic/ui/tools/schema_wdg.py:            var connector = spt.pipeline.get_selected_connector();
tactic/ui/tools/schema_wdg.py:        var connector = spt.pipeline.get_selected_connector();
tactic/ui/tools/schema_wdg.py:           spt.alert('connector line is not selected. Please click on it and try again.');
tactic/ui/tools/schema_wdg.py:            var connector = spt.pipeline.get_selected_connector();
tactic/ui/tools/schema_wdg.py:    var connector = spt.pipeline.get_selected_connector();
tactic/ui/tools/schema_wdg.py:    spt.pipeline.delete_selected(connector);
tactic/ui/tools/schema_wdg.py:    spt.pipeline.clear_selected();
tactic/ui/tools/schema_wdg.py:    var selected_nodes = spt.pipeline.get_selected_nodes();
tactic/ui/tools/schema_wdg.py:    var selected = spt.pipeline.get_selected();
tactic/ui/tools/schema_wdg.py:        //var connector = spt.pipeline.get_selected();
tactic/ui/tools/schema_wdg.py:            spt.pipeline.clear_selected();
tactic/ui/table/group_element_wdg.py:            var src_search_keys = spt.dg_table.get_selected_search_keys(src_table);
tactic/ui/table/sobject_summary_wdg.py:            var search_keys = spt.table.get_selected_search_keys();
tactic/ui/table/task_element_wdg.py:        spt.dg_table.gear_smenu_add_task_selected_cbk(evt,bvr);
tactic/ui/table/task_element_wdg.py:                    var rows = spt.table.get_selected_rows();
tactic/ui/table/expression_element_wdg.py:        var search_keys = spt.dg_table.get_selected_search_keys(table);
tactic/ui/table/expression_element_wdg.py:            spt.alert("No rows selected");
tactic/ui/table/drop_element_wdg.py:    var src_search_keys = spt.table.get_selected_codes();
tactic/ui/table/drop_element_wdg.py:    var src_rows = spt.table.get_selected_rows();
tactic/ui/table/drop_element_wdg.py:    var dst_rows = spt.table.get_selected_rows();
tactic/ui/table/delete_element_wdg.py:        spt.table.delete_selected();
tactic/ui/table/gantt_element_wdg.py:                spt.gantt.copy_selected(top);
tactic/ui/table/gantt_element_wdg.py:                spt.gantt.paste_selected(top);
tactic/ui/table/gantt_element_wdg.py:            if (! spt.gantt.is_selected(top) ) {
tactic/ui/table/gantt_element_wdg.py:spt.gantt.selected = [];
tactic/ui/table/gantt_element_wdg.py:    spt.gantt.selected.push(top);
tactic/ui/table/gantt_element_wdg.py:spt.gantt.is_selected = function(top) {
tactic/ui/table/gantt_element_wdg.py:    for (var i = 0; i < spt.gantt.selected.length; i++) {
tactic/ui/table/gantt_element_wdg.py:        var top = spt.gantt.selected[i];
tactic/ui/table/gantt_element_wdg.py:    spt.gantt.selected = [];
tactic/ui/table/gantt_element_wdg.py:spt.gantt.copy_selected = function(top) {
tactic/ui/table/gantt_element_wdg.py:spt.gantt.paste_selected = function(top) {
tactic/ui/table/gantt_element_wdg.py:        var containers = spt.table.get_selected_rows(table);
tactic/ui/table/gantt_element_wdg.py:        var containers = spt.dg_table.get_selected_tbodies(table);
tactic/ui/table/gantt_element_wdg.py:    var selected_rows = version == 2 ? spt.table.get_selected_rows(): spt.dg_table.get_selected( table );
tactic/ui/popups/action_bar_wdg.py:                        "bvr_cb": {'cbjs_action': "spt.dg_table.retire_selected('%s');" % my.table_id} },
tactic/ui/popups/action_bar_wdg.py:                        "bvr_cb": {'cbjs_action': "spt.dg_table.delete_selected('%s');" % my.table_id} },
tactic/ui/popups/transaction_popup_wdg.py:            var search_keys = spt.dg_table.get_selected_search_keys(table);
tactic/ui/popups/transaction_popup_wdg.py:                spt.error("No transactions selected");
tactic/ui/popups/transaction_popup_wdg.py:                spt.alert("No files selected");
tactic/ui/app/plugin_wdg.py:                top.setAttribute("spt_selected", "files");
tactic/ui/app/plugin_wdg.py:                top.setAttribute("spt_selected", "files");
tactic/ui/app/plugin_wdg.py:                top.setAttribute("spt_selected", "files");
tactic/ui/app/plugin_wdg.py:                top.setAttribute("spt_selected", "files");
tactic/ui/app/plugin_wdg.py:            top.setAttribute("spt_selected", "manifest");
tactic/ui/app/plugin_wdg.py:                top.setAttribute("spt_selected", "documentation")
tactic/ui/app/plugin_wdg.py:            top.setAttribute("spt_selected", "info")
tactic/ui/app/plugin_wdg.py:            top.setAttribute("spt_selected", "files");
tactic/ui/app/note_wdg.py:                    spt.input.save_selected(bvr, '%s','%s');
tactic/ui/app/note_wdg.py:                    spt.input.save_selected(bvr, '%s','%s');
tactic/ui/app/note_wdg.py:                    spt.input.save_selected(bvr, '%s','%s');
tactic/ui/app/note_wdg.py:                    spt.input.save_selected(bvr, '%s','%s');
tactic/ui/app/note_wdg.py:                        spt.input.save_selected(bvr, '%s','%s');
tactic/ui/app/search_limit_wdg.py:            selected_tab = document.getElementsByClassName("spt_is_selected");
tactic/ui/app/search_limit_wdg.py:                    if(tab_content[r].getAttribute("spt_title") == selected_title){
tactic/ui/app/help_wdg.py:        var cbjs_insert = "spt.tab.reload_selected();"
tactic/ui/app/task_wdg.py:            spt.dg_table.add_task_selected(bvr);
tactic/ui/panel/manage_view_panel_wdg.py:            var icon_name = chooser.getProperty("spt_icon_selected");
tactic/ui/panel/print_layout_wdg.py:                    selected_tbodies = spt.table.get_selected_rows();
tactic/ui/panel/print_layout_wdg.py:                    selected_tbodies = spt.dg_table.get_selected_tbodies( table );
tactic/ui/panel/panel_wdg.py:        spt.tab.load_selected(element_name, title, class_name, options, values);
tactic/ui/panel/panel_wdg.py:            selected_tab = document.getElementsByClassName("spt_is_selected");//MTM
tactic/ui/panel/panel_wdg.py:                    if(tab_content[r].getAttribute("spt_title") == selected_title){//MTM
tactic/ui/panel/panel_wdg.py:            selected_tab = document.getElementsByClassName("spt_is_selected");//MTM
tactic/ui/panel/panel_wdg.py:                    if(tab_content[r].getAttribute("spt_title") == selected_title){//MTM
tactic/ui/panel/tile_layout_wdg.py:                var last_selected = spt.table.last_selected_row;
tactic/ui/panel/tile_layout_wdg.py:                var select = last_selected.hasClass("spt_table_selected");
tactic/ui/panel/tile_layout_wdg.py:                        row.removeClass("spt_table_selected");
tactic/ui/panel/tile_layout_wdg.py:                        row.addClass("spt_table_selected");
tactic/ui/panel/tile_layout_wdg.py:                    row.removeClass("spt_table_selected");
tactic/ui/panel/tile_layout_wdg.py:                    row.addClass("spt_table_selected");
tactic/ui/panel/layout_wdg.py:                        spt.alert('A file must be selected.');
tactic/ui/panel/layout_wdg.py:            var header = spt.tab.get_selected_header();
tactic/ui/panel/action_wdg.py:        #view_select.add_event("onchange", "spt.dg_table.retire_selected_cbk('%s')" % my.target_id)
tactic/ui/panel/base_table_layout_wdg.py:                        spt.alert('A file must be selected.');
tactic/ui/panel/table_layout_wdg.py:            if (row.hasClass("spt_table_selected")) {
tactic/ui/panel/table_layout_wdg.py:        var last_selected = spt.table.last_selected_row;
tactic/ui/panel/table_layout_wdg.py:spt.table.last_selected_row = null;
tactic/ui/panel/table_layout_wdg.py:    if (!spt.has_class(row,'spt_table_selected')) {
tactic/ui/panel/table_layout_wdg.py:        row.addClass("spt_table_selected");
tactic/ui/panel/table_layout_wdg.py:    spt.table.last_selected_row = row;
tactic/ui/panel/table_layout_wdg.py:    row.removeClass("spt_table_selected");
tactic/ui/panel/table_layout_wdg.py:    spt.table.last_selected_row = null;
tactic/ui/panel/table_layout_wdg.py:spt.table.get_selected_rows = function() {
tactic/ui/panel/table_layout_wdg.py:    var rows = table.getElements(".spt_table_selected");
tactic/ui/panel/table_layout_wdg.py:spt.table.get_selected_search_keys = function() {
tactic/ui/panel/table_layout_wdg.py:    var rows = spt.table.get_selected_rows();
tactic/ui/panel/table_layout_wdg.py:spt.table.get_selected_codes = function() {
tactic/ui/panel/table_layout_wdg.py:    var rows = spt.table.get_selected_rows();
tactic/ui/panel/table_layout_wdg.py:    var selected_rows = spt.table.get_selected_rows();
tactic/ui/panel/table_layout_wdg.py:spt.table.remove_selected = function() {
tactic/ui/panel/table_layout_wdg.py:    var rows = spt.table.get_selected_rows();
tactic/ui/panel/table_layout_wdg.py:spt.table.delete_selected = function()
tactic/ui/panel/table_layout_wdg.py:    var selected_rows = spt.table.get_selected_rows();
tactic/ui/panel/table_layout_wdg.py:        spt.alert("Nothing selected to " + action);
tactic/ui/panel/table_layout_wdg.py:    spt.table.delete_rows(selected_rows);
tactic/ui/panel/table_layout_wdg.py:spt.table.retire_selected = function()
tactic/ui/panel/table_layout_wdg.py:    spt.table.operate_selected('retire');
tactic/ui/panel/table_layout_wdg.py:spt.table.operate_selected = function(action)
tactic/ui/panel/table_layout_wdg.py:    var selected_rows = spt.table.get_selected_rows();
tactic/ui/panel/table_layout_wdg.py:        spt.alert("Nothing selected to " + action);
tactic/ui/panel/table_layout_wdg.py:    var show_retired = action == 'retire' ? spt.dg_table.get_show_retired_flag( selected_rows[0] ) : false;
tactic/ui/panel/table_layout_wdg.py:    var search_key_info = spt.dg_table.parse_search_key( selected_rows[0].getAttribute("spt_search_key") );
tactic/ui/panel/table_layout_wdg.py:                spt.table.refresh_rows(selected_rows);
tactic/ui/checkin/scm_dir_list_wdg.py:            var paths = spt.checkin.get_selected_paths();
tactic/ui/checkin/scm_dir_list_wdg.py:            var paths = spt.checkin.get_selected_paths();
tactic/ui/checkin/scm_dir_list_wdg.py:            var paths = spt.checkin.get_selected_paths();
tactic/ui/checkin/checkin_dir_list_wdg.py:spt.checkin_list.last_selected = null;
tactic/ui/checkin/checkin_dir_list_wdg.py:spt.checkin_list.get_selected_paths = function() {
tactic/ui/checkin/checkin_dir_list_wdg.py:    spt.checkin_list.last_selected = null;
tactic/ui/checkin/checkin_dir_list_wdg.py:        spt.checkin_list.last_selected = null;
tactic/ui/checkin/checkin_dir_list_wdg.py:        spt.checkin_list.last_selected = row;
tactic/ui/checkin/checkin_dir_list_wdg.py:spt.checkin_list.select_preselected = function(){
tactic/ui/checkin/checkin_dir_list_wdg.py:        if (spt.has_class(row, 'spt_preselected')) {
tactic/ui/checkin/checkin_dir_list_wdg.py:spt.checkin_list.select_preselected();
tactic/ui/checkin/checkin_dir_list_wdg.py:        var last_selected = spt.checkin_list.last_selected;
tactic/ui/checkin/checkin_dir_list_wdg.py:        spt.checkin_list.last_selected = bvr.src_el;
tactic/ui/checkin/checkin_dir_list_wdg.py:            var selected_paths = spt.checkin_list.get_selected_paths();
tactic/ui/checkin/checkin_dir_list_wdg.py:            spt.notify.show_message("Copied " + selected_paths.length + " files to sandbox");
tactic/ui/checkin/checkin_dir_list_wdg.py:            dir_div.add_class("spt_preselected")
tactic/ui/checkin/checkin_dir_list_wdg.py:            item_div.add_class("spt_preselected") 
tactic/ui/checkin/checkin_dir_list_wdg.py:            spt.table.remove_selected();
tactic/ui/checkin/checkin_dir_list_wdg.py:            var search_keys = spt.table.get_selected_search_keys();
tactic/ui/checkin/snapshot_files_wdg.py:                spt.alert("No folder selected to copy to");
tactic/ui/checkin/snapshot_files_wdg.py:spt.selection.get_selected = function() {
tactic/ui/checkin/snapshot_files_wdg.py:            var items = spt.selection.get_selected();
tactic/ui/checkin/snapshot_files_wdg.py:                    spt.alert("No folder selected to copy to.");
tactic/ui/checkin/sandbox_select_wdg.py:            if (!bvr.src_el.hasClass("spt_selected")) {
tactic/ui/checkin/sandbox_select_wdg.py:                sandbox_div.add_class("spt_selected")
tactic/ui/widget/gear_menu_wdg.py:                        "bvr_cb": {'cbjs_action': "spt.dg_table.gear_smenu_retire_selected_cbk(evt,bvr);"}
tactic/ui/widget/gear_menu_wdg.py:                    spt.dg_table.gear_smenu_delete_selected_cbk(evt,bvr);
tactic/ui/widget/gear_menu_wdg.py:                    var selected_search_keys = spt.table.get_selected_search_keys()
tactic/ui/widget/gear_menu_wdg.py:                    search_keys = spt.table.get_selected_search_keys();
tactic/ui/widget/gear_menu_wdg.py:                    search_keys = spt.dg_table.get_selected_search_keys(table);
tactic/ui/widget/gear_menu_wdg.py:                    search_keys = spt.table.get_selected_search_keys();
tactic/ui/widget/gear_menu_wdg.py:                    search_keys = spt.dg_table.get_selected_search_keys(table);
tactic/ui/widget/gear_menu_wdg.py:                    search_keys = spt.table.get_selected_search_keys();
tactic/ui/widget/gear_menu_wdg.py:                    search_keys = spt.dg_table.get_selected_search_keys(table);
tactic/ui/widget/gear_menu_wdg.py:                'cbjs_action': "spt.dg_table.gear_smenu_add_task_selected_cbk(evt,bvr);"
tactic/ui/widget/gear_menu_wdg.py:                    var selected = spt.table.get_selected_search_keys();
tactic/ui/widget/gear_menu_wdg.py:                    selected = spt.table.get_selected_search_keys();
tactic/ui/widget/gear_menu_wdg.py:                    selected = spt.dg_table.get_selected_search_keys( table );
tactic/ui/widget/gear_menu_wdg.py:                    spt.alert("No items selected");
tactic/ui/widget/chooser_wdg.py:                            cwd.setProperty("spt_icon_selected", "%s");
tactic/ui/widget/chooser_wdg.py:                            cwd.setProperty("spt_icon_selected", "%s");
tactic/ui/widget/checkin_wdg.py:spt.checkin.get_selected_items = function() {
tactic/ui/widget/checkin_wdg.py:spt.checkin.get_selected_paths = function() {
tactic/ui/widget/checkin_wdg.py:spt.checkin.get_selected_subcontexts = function(cls) {
tactic/ui/widget/checkin_wdg.py:spt.checkin.get_selected_contexts = function() {
tactic/ui/widget/checkin_wdg.py:    return spt.checkin.get_selected_subcontexts('spt_context');
tactic/ui/widget/checkin_wdg.py:    var file_paths = spt.checkin.get_selected_paths();
tactic/ui/widget/checkin_wdg.py:        var contexts = spt.checkin.get_selected_contexts();
tactic/ui/widget/checkin_wdg.py:        var subcontexts = spt.checkin.get_selected_subcontexts();
tactic/ui/widget/checkin_wdg.py:spt.checkin.transfer_selected_paths = function(transfer_mode, options) {
tactic/ui/widget/checkin_wdg.py:    var paths = spt.checkin.get_selected_paths();
tactic/ui/widget/checkin_wdg.py:    var paths = spt.checkin.transfer_selected_paths("upload");
tactic/ui/widget/checkin_wdg.py:    //var paths = spt.checkin.transfer_selected_paths("copy");
tactic/ui/widget/checkin_wdg.py:    var paths = spt.checkin.get_selected_paths();
tactic/ui/widget/checkin_wdg.py:    contexts = spt.checkin.get_selected_contexts();
tactic/ui/widget/checkin_wdg.py:    subcontexts = spt.checkin.get_selected_subcontexts();
tactic/ui/widget/checkin_wdg.py:    file_paths = spt.checkin.get_selected_paths();
tactic/ui/widget/checkin_wdg.py:var items = spt.checkin.get_selected_items();
tactic/ui/widget/checkin_wdg.py:    spt.alert("No files selected");
tactic/ui/widget/checkin_wdg.py:            var search_keys = spt.dg_table.get_selected_search_keys(table);
tactic/ui/widget/checkin_wdg.py:            var search_keys = spt.dg_table.get_selected_search_keys(table);
